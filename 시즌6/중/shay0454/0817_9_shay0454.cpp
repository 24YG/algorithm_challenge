#include<iostream>
using namespace std;
int GCD(int a, int b) {                              // 유클리드 호제법하면 유명한 최대공약수 함수
	if (b == 0)return a;                               // GCD : greatest common divisor
	else return GCD(b, a % b);
}
int main() {
	int x, y; cin >> x >> y;                            // x,y 선언 및 입력
	cout << x + y - ((x > y) ? GCD(x, y) : GCD(y, x));  // x와 y 크기 비교 후 계산
	return 0;
}
// 설명문 (특 : 설명 못함)
// 간단히 말하면 서로수인 두 수의 조건에 따른 개수는 두 수의 합에 -1인 값이 나온다
// 임의의 자연수 n을 생각해보고, n*1의 직사각형을 만들어보자 이 때 문제의 조건에 따른 값은 n이다. = n+1-1
// 이번엔 임의의 홀수 o라 하고 o*2의 직사각형을 만들고 조건에 따라 세어보면 o+1이 만들어진다. = o+2-1
// 이런 식으로 10미만의 임의의 서로수 관계인 두 수로 위 과정을 해보면 두 수의 합에 -1인 값이 나온다
// 그러면 왜 분류에 유클리드 호제법이 있는가? 두 수의 GCD를 구하면 예를 들어 3*18의 직사각형으로 해보면 3*18인 직사각형을
// 각 길이를 GCD로 나눈 1*6 직사각형 GCD^2로 얻을수 있으며, 대각선이 그어져 있는 직사각형만 보면 GCD개의 직사각형을 얻을 수 있다.
// 이 때의 두 길이는 서로수이므로 처음의 과정으로 구할 수 있다. 
// 즉 GCD((x/GCD)+(y/GCD)-1)이므로 정리하면 x+y-GCD가 나온다.
